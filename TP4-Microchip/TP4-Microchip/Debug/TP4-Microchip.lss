
TP4-Microchip.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001f0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800114  00800114  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a79  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a3  00000000  00000000  00000e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000541  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e1  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fe  00000000  00000000  00002165  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002463  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
volatile char RX_Buffer=0;

int main(void)
{
	uint8_t l_red = 0;
	DDRB = (1 << PORTB1)|(1 << PORTB2)|(1 << PORTB5); // salida puertos B 1,2,5
  a6:	86 e2       	ldi	r24, 0x26	; 38
  a8:	84 b9       	out	0x04, r24	; 4
	/* configuracion pwm puertos 1 y 2*/
	OCR1A = 0;
  aa:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ae:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0;
  b2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  b6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCCR1A = (1<< COM1A1) | (1<< COM1B1) | (1<< COM1A0) | (1<< COM1B0) | (1<< WGM10);	// PHASE CORRECT 8BIT - INVERTIDO
  ba:	81 ef       	ldi	r24, 0xF1	; 241
  bc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B= (1<< CS10);							        // PRESCALER 1
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	PORTB|=((1 << PORTB2)|(1 << PORTB5));
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	84 62       	ori	r24, 0x24	; 36
  ca:	85 b9       	out	0x05, r24	; 5
	
	/* UART */
	SerialPort_Init(BR9600);
  cc:	87 e6       	ldi	r24, 0x67	; 103
  ce:	0e 94 b6 00 	call	0x16c	; 0x16c <SerialPort_Init>
	SerialPort_TX_Enable();
  d2:	0e 94 c0 00 	call	0x180	; 0x180 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
  d6:	0e 94 c6 00 	call	0x18c	; 0x18c <SerialPort_RX_Enable>
	SerialPort_Send_String("Ingrese R, G o B\n\r");
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SerialPort_Send_String>
	SerialPort_RX_Interrupt_Enable();
  e2:	0e 94 cc 00 	call	0x198	; 0x198 <SerialPort_RX_Interrupt_Enable>
	sei();
  e6:	78 94       	sei

volatile char RX_Buffer=0;

int main(void)
{
	uint8_t l_red = 0;
  e8:	40 e0       	ldi	r20, 0x00	; 0
	SerialPort_Send_String("Ingrese R, G o B\n\r");
	SerialPort_RX_Interrupt_Enable();
	sei();
    while (1) 
    {
		if(l_red > TCNT1){
  ea:	84 2f       	mov	r24, r20
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  f2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  f6:	28 17       	cp	r18, r24
  f8:	39 07       	cpc	r19, r25
  fa:	20 f4       	brcc	.+8      	; 0x104 <main+0x5e>
			PORTB &=~ (1<< PORTB5);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8f 7d       	andi	r24, 0xDF	; 223
 100:	85 b9       	out	0x05, r24	; 5
 102:	03 c0       	rjmp	.+6      	; 0x10a <main+0x64>
		}else{
			PORTB |= (1<< PORTB5);
 104:	85 b1       	in	r24, 0x05	; 5
 106:	80 62       	ori	r24, 0x20	; 32
 108:	85 b9       	out	0x05, r24	; 5
		}
		// leer
		if(RX_Buffer){
 10a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 10e:	88 23       	and	r24, r24
 110:	61 f3       	breq	.-40     	; 0xea <main+0x44>
			switch (RX_Buffer) {
 112:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 116:	87 34       	cpi	r24, 0x47	; 71
 118:	39 f0       	breq	.+14     	; 0x128 <main+0x82>
 11a:	82 35       	cpi	r24, 0x52	; 82
 11c:	19 f0       	breq	.+6      	; 0x124 <main+0x7e>
 11e:	82 34       	cpi	r24, 0x42	; 66
 120:	91 f4       	brne	.+36     	; 0x146 <main+0xa0>
 122:	0a c0       	rjmp	.+20     	; 0x138 <main+0x92>
				case 'R':
					l_red^=0xFF;
 124:	40 95       	com	r20
					break;
 126:	0f c0       	rjmp	.+30     	; 0x146 <main+0xa0>
				case 'G':
					OCR1B^=0xFF;
 128:	ea e8       	ldi	r30, 0x8A	; 138
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	91 81       	ldd	r25, Z+1	; 0x01
 130:	80 95       	com	r24
 132:	91 83       	std	Z+1, r25	; 0x01
 134:	80 83       	st	Z, r24
					break;
 136:	07 c0       	rjmp	.+14     	; 0x146 <main+0xa0>
				case 'B':
					OCR1A^=0xFF;
 138:	e8 e8       	ldi	r30, 0x88	; 136
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	91 81       	ldd	r25, Z+1	; 0x01
 140:	80 95       	com	r24
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
					break;
					
			}
			RX_Buffer=0;
 146:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 14a:	cf cf       	rjmp	.-98     	; 0xea <main+0x44>

0000014c <__vector_18>:
		}
    }
}
ISR(USART_RX_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
	RX_Buffer = UDR0;
 158:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 15c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
}
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <SerialPort_Init>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 16c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 170:	96 e0       	ldi	r25, 0x06	; 6
 172:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 176:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 17a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 17e:	08 95       	ret

00000180 <SerialPort_TX_Enable>:
 180:	e1 ec       	ldi	r30, 0xC1	; 193
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	88 60       	ori	r24, 0x08	; 8
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 18c:	e1 ec       	ldi	r30, 0xC1	; 193
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 61       	ori	r24, 0x10	; 16
 194:	80 83       	st	Z, r24
 196:	08 95       	ret

00000198 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 198:	e1 ec       	ldi	r30, 0xC1	; 193
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	80 83       	st	Z, r24
 1a2:	08 95       	ret

000001a4 <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisión

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
 1a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1a8:	85 ff       	sbrs	r24, 5
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <SerialPort_Wait_For_TX_Buffer_Free>
}
 1ac:	08 95       	ret

000001ae <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 1ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1b2:	08 95       	ret

000001b4 <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	7c 01       	movw	r14, r24
	uint8_t i = 0;
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <SerialPort_Send_String+0x1e>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
 1c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
 1c8:	f8 01       	movw	r30, r16
 1ca:	80 81       	ld	r24, Z
 1cc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <SerialPort_Send_Data>
		i++;
 1d0:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 1d2:	87 01       	movw	r16, r14
 1d4:	0c 0f       	add	r16, r28
 1d6:	11 1d       	adc	r17, r1
 1d8:	f8 01       	movw	r30, r16
 1da:	80 81       	ld	r24, Z
 1dc:	81 11       	cpse	r24, r1
 1de:	f2 cf       	rjmp	.-28     	; 0x1c4 <SerialPort_Send_String+0x10>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
