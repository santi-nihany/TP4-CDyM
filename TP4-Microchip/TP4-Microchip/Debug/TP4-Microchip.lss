
TP4-Microchip.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000252  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b56  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000842  00000000  00000000  00000f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004eb  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00001ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056a  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000314  00000000  00000000  000023a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000026ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  9e:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
//volatile act = 0;
volatile uint8_t adc_value;


void ADC_Init() {
	DIDR0 = 0x01; // digital input disable
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1 << ADEN) ; // adc enable and ck/128 -> f = 125KHz
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	87 68       	ori	r24, 0x87	; 135
  b4:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1 << MUX1) | (1 << MUX0); // Vref = AVCC, left justified, AC3 pin
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	83 66       	ori	r24, 0x63	; 99
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <ADC_Read>:
}

uint16_t ADC_Read() {
	ADCSRA |= (1 << ADSC);  // Iniciar conversión
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	while (!(ADCSRA & (1 << ADSC)));  // Esperar a que termine la conversión
  cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	86 ff       	sbrs	r24, 6
  d2:	fc cf       	rjmp	.-8      	; 0xcc <ADC_Read+0xa>
	ADCSRA |= (1<< ADIF); // clear the ADIF flag
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	80 83       	st	Z, r24
	return ADCH;  // Retornar el valor leído
  de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	08 95       	ret

000000e6 <main>:


int main(void)
{
	uint8_t l_red = 0;
	DDRB |= (1 << PORTB1)|(1 << PORTB2)|(1 << PORTB5); // salida puertos B 1,2,5
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	86 62       	ori	r24, 0x26	; 38
  ea:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(1<< PINC3);
  ec:	87 b1       	in	r24, 0x07	; 7
  ee:	87 7f       	andi	r24, 0xF7	; 247
  f0:	87 b9       	out	0x07, r24	; 7
	/* configuracion pwm puertos 1 y 2*/
	OCR1A = 0;
  f2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0;
  fa:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  fe:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCCR1A |= (1<< COM1A1) | (1<< COM1B1) | (1<< COM1A0) | (1<< COM1B0) | (1<< WGM10);	// PHASE CORRECT 8BIT - INVERTIDO
 102:	e0 e8       	ldi	r30, 0x80	; 128
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	81 6f       	ori	r24, 0xF1	; 241
 10a:	80 83       	st	Z, r24
	TCCR1B |= (1<< CS10);							        // PRESCALER 1
 10c:	e1 e8       	ldi	r30, 0x81	; 129
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
	PORTB|=((1 << PORTB2)|(1 << PORTB5));
 116:	85 b1       	in	r24, 0x05	; 5
 118:	84 62       	ori	r24, 0x24	; 36
 11a:	85 b9       	out	0x05, r24	; 5

	ADC_Init();
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	
	/* UART */
	SerialPort_Init(BR9600);
 120:	87 e6       	ldi	r24, 0x67	; 103
 122:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SerialPort_Init>
	SerialPort_TX_Enable();
 126:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();
 12a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SerialPort_RX_Enable>
	SerialPort_Send_String("Ingrese R, G o B\n\r");
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 0b 01 	call	0x216	; 0x216 <SerialPort_Send_String>
	SerialPort_RX_Interrupt_Enable();
 136:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SerialPort_RX_Interrupt_Enable>
	sei();
 13a:	78 94       	sei
}


int main(void)
{
	uint8_t l_red = 0;
 13c:	c0 e0       	ldi	r28, 0x00	; 0
	SerialPort_Send_String("Ingrese R, G o B\n\r");
	SerialPort_RX_Interrupt_Enable();
	sei();
    while (1) 
    {
		if(l_red > TCNT1){
 13e:	8c 2f       	mov	r24, r28
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 146:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 14a:	28 17       	cp	r18, r24
 14c:	39 07       	cpc	r19, r25
 14e:	20 f4       	brcc	.+8      	; 0x158 <main+0x72>
			PORTB &=~ (1<< PORTB5);
 150:	85 b1       	in	r24, 0x05	; 5
 152:	8f 7d       	andi	r24, 0xDF	; 223
 154:	85 b9       	out	0x05, r24	; 5
 156:	03 c0       	rjmp	.+6      	; 0x15e <main+0x78>
		}else{
			PORTB |= (1<< PORTB5);
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	85 b9       	out	0x05, r24	; 5
		}
		// leer
		adc_value = ADC_Read();
 15e:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
 162:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <adc_value>
		switch (RX_Buffer) {
 166:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 16a:	87 34       	cpi	r24, 0x47	; 71
 16c:	41 f0       	breq	.+16     	; 0x17e <main+0x98>
 16e:	82 35       	cpi	r24, 0x52	; 82
 170:	19 f0       	breq	.+6      	; 0x178 <main+0x92>
 172:	82 34       	cpi	r24, 0x42	; 66
 174:	91 f4       	brne	.+36     	; 0x19a <main+0xb4>
 176:	0a c0       	rjmp	.+20     	; 0x18c <main+0xa6>
			case 'R':
			l_red = adc_value;
 178:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <adc_value>
			break;
 17c:	0e c0       	rjmp	.+28     	; 0x19a <main+0xb4>
			case 'G':
			OCR1B = adc_value;
 17e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <adc_value>
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 188:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			case 'B':
			OCR1A = adc_value;
 18c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <adc_value>
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 196:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	81 ee       	ldi	r24, 0xE1	; 225
 19e:	94 e0       	ldi	r25, 0x04	; 4
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0xba>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0xc4>
 1aa:	00 00       	nop
 1ac:	c8 cf       	rjmp	.-112    	; 0x13e <main+0x58>

000001ae <__vector_18>:
			break;
		}
		_delay_ms(100);
    }
}
ISR(USART_RX_vect){
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
	RX_Buffer = UDR0;
 1ba:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1be:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	/*act=RX_Buffer;
	RX_Buffer=0;*/
}
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <SerialPort_Init>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 1ce:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1d2:	96 e0       	ldi	r25, 0x06	; 6
 1d4:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1e0:	08 95       	ret

000001e2 <SerialPort_TX_Enable>:
 1e2:	e1 ec       	ldi	r30, 0xC1	; 193
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 60       	ori	r24, 0x08	; 8
 1ea:	80 83       	st	Z, r24
 1ec:	08 95       	ret

000001ee <SerialPort_RX_Enable>:


// Inicialización de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 1ee:	e1 ec       	ldi	r30, 0xC1	; 193
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	80 61       	ori	r24, 0x10	; 16
 1f6:	80 83       	st	Z, r24
 1f8:	08 95       	ret

000001fa <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 1fa:	e1 ec       	ldi	r30, 0xC1	; 193
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	80 68       	ori	r24, 0x80	; 128
 202:	80 83       	st	Z, r24
 204:	08 95       	ret

00000206 <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisión

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
 206:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 20a:	85 ff       	sbrs	r24, 5
 20c:	fc cf       	rjmp	.-8      	; 0x206 <SerialPort_Wait_For_TX_Buffer_Free>
}
 20e:	08 95       	ret

00000210 <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 210:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 214:	08 95       	ret

00000216 <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	0f 93       	push	r16
 21c:	1f 93       	push	r17
 21e:	cf 93       	push	r28
 220:	7c 01       	movw	r14, r24
	uint8_t i = 0;
 222:	c0 e0       	ldi	r28, 0x00	; 0
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 224:	07 c0       	rjmp	.+14     	; 0x234 <SerialPort_Send_String+0x1e>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
 226:	0e 94 03 01 	call	0x206	; 0x206 <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
 22a:	f8 01       	movw	r30, r16
 22c:	80 81       	ld	r24, Z
 22e:	0e 94 08 01 	call	0x210	; 0x210 <SerialPort_Send_Data>
		i++;
 232:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 234:	87 01       	movw	r16, r14
 236:	0c 0f       	add	r16, r28
 238:	11 1d       	adc	r17, r1
 23a:	f8 01       	movw	r30, r16
 23c:	80 81       	ld	r24, Z
 23e:	81 11       	cpse	r24, r1
 240:	f2 cf       	rjmp	.-28     	; 0x226 <SerialPort_Send_String+0x10>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	08 95       	ret

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
